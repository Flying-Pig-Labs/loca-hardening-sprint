#!/usr/bin/env python3
"""
GitHub Project Setup Script for Loca Hardening Sprint
Creates milestones, epic issues, and child issues with proper linking
"""

import os
import requests
import json
from datetime import datetime, timedelta

# Configuration
REPO_OWNER = "Flying-Pig-Labs"
REPO_NAME = "loca-hardening-sprint"
GITHUB_TOKEN = os.getenv("GITHUB_TOKEN")

if not GITHUB_TOKEN:
    raise ValueError("GITHUB_TOKEN environment variable is required")

BASE_URL = f"https://api.github.com/repos/{REPO_OWNER}/{REPO_NAME}"
HEADERS = {
    "Authorization": f"token {GITHUB_TOKEN}",
    "Accept": "application/vnd.github.v3+json"
}

def create_milestone(title, description, due_date=None):
    """Create a milestone and return its data"""
    data = {
        "title": title,
        "description": description,
        "state": "open"
    }
    if due_date:
        data["due_on"] = due_date
    
    response = requests.post(f"{BASE_URL}/milestones", headers=HEADERS, json=data)
    if response.status_code == 201:
        milestone_data = response.json()
        print(f"‚úì Created milestone: {title} (ID: {milestone_data['number']})")
        return milestone_data
    else:
        print(f"‚úó Failed to create milestone {title}: {response.text}")
        return None

def create_issue(title, body, labels=None, milestone_number=None, assignees=None):
    """Create an issue and return its data"""
    data = {
        "title": title,
        "body": body,
        "labels": labels or [],
        "assignees": assignees or []
    }
    if milestone_number:
        data["milestone"] = milestone_number
    
    response = requests.post(f"{BASE_URL}/issues", headers=HEADERS, json=data)
    if response.status_code == 201:
        issue_data = response.json()
        print(f"‚úì Created issue: {title} (#{issue_data['number']})")
        return issue_data
    else:
        print(f"‚úó Failed to create issue {title}: {response.text}")
        return None

def create_label(name, color, description=""):
    """Create a label if it doesn't exist"""
    data = {
        "name": name,
        "color": color,
        "description": description
    }
    
    response = requests.post(f"{BASE_URL}/labels", headers=HEADERS, json=data)
    if response.status_code == 201:
        print(f"‚úì Created label: {name}")
        return True
    elif response.status_code == 422:  # Label already exists
        print(f"- Label already exists: {name}")
        return True
    else:
        print(f"‚úó Failed to create label {name}: {response.text}")
        return False

def setup_labels():
    """Create necessary labels"""
    print("\nüìã Setting up labels...")
    labels = [
        ("epic", "8B5A2B", "Epic-level work item"),
        ("story", "0075CA", "User story"),
        ("test", "28A745", "Testing related"),
        ("design", "6F42C1", "Design/specification work"),
        ("coding", "FD7E14", "Implementation work"),
        ("difficulty-low", "C5F015", "Low difficulty"),
        ("difficulty-medium", "FBCA04", "Medium difficulty"),  
        ("difficulty-high", "D93F0B", "High difficulty")
    ]
    
    for name, color, description in labels:
        create_label(name, color, description)

def create_milestones():
    """Create all milestones first and return milestone data"""
    print("\nüéØ Creating milestones...")
    milestones = {}
    today = datetime.now()
    
    # Day milestones
    for day in range(1, 6):
        due_date = (today + timedelta(days=day-1)).isoformat()
        milestone = create_milestone(
            f"Day {day}",
            f"Sprint Day {day} deliverables",
            due_date
        )
        if milestone:
            milestones[f"day_{day}"] = milestone
    
    # Testing milestone
    testing_milestone = create_milestone(
        "Testing",
        "All testing activities and test suites"
    )
    if testing_milestone:
        milestones["testing"] = testing_milestone
    
    return milestones

def create_epics(milestones):
    """Create epic issues and return epic data with URLs"""
    print("\nüèóÔ∏è Creating epics...")
    epics = {}
    
    # Epic 1: Multi-tenancy
    epic1_body = """
## Description
Multi-tenancy implementation to support multiple customers on the same platform with proper data isolation.

## Scope
Build and Spec (12 points)

## Stories
This epic contains 8 user stories covering design, implementation, and testing phases.

## Acceptance Criteria
- [ ] All tables audited for tenant ID requirements
- [ ] Multi-tenancy architecture documented
- [ ] Tenant table created and implemented
- [ ] All data access properly scoped to tenants
- [ ] JWT tokens scoped to specific tenants
- [ ] No hard-coded secrets in codebase
- [ ] ORM protection against SQL injection verified
"""
    
    epic1 = create_issue(
        "[EPIC] Multi-tenancy",
        epic1_body,
        labels=["epic"],
        milestone_number=milestones.get("day_4", {}).get("number")
    )
    if epic1:
        epics["multi_tenancy"] = epic1
    
    # Epic 2: Multi-environment
    epic2_body = """
## Description
Multi-environment support for proper SDLC with development, staging, and production environments.

## Scope
Spec only (16 points)

## Stories
This epic contains 4 specification stories covering IAM, SDLC, and configuration management.

## Acceptance Criteria
- [ ] Application IAM specification complete
- [ ] SDLC process documented
- [ ] Client stack configuration and secrets scoping specified
- [ ] Client stack initialization process defined
"""
    
    epic2 = create_issue(
        "[EPIC] Multi-environment",
        epic2_body,
        labels=["epic"],
        milestone_number=milestones.get("day_2", {}).get("number")
    )
    if epic2:
        epics["multi_environment"] = epic2
    
    # Epic 3: Payment and Subscriptions
    epic3_body = """
## Description
Payment and subscription system to monetize the platform.

## Scope
Spec only (7 points)

## Stories
This epic contains 3 specification stories covering billing, subscriptions, and middleware.

## Acceptance Criteria
- [ ] Billing systems specification complete
- [ ] Subscription model and data layer designed
- [ ] Subscription middleware specification complete
"""
    
    epic3 = create_issue(
        "[EPIC] Payment and Subscriptions",
        epic3_body,
        labels=["epic"],
        milestone_number=milestones.get("day_5", {}).get("number")
    )
    if epic3:
        epics["payment_subscriptions"] = epic3
    
    # Test Epics
    test_epics_data = [
        ("Feature Tests", "Core feature testing including troublemaker and syntarchetype"),
        ("Web Tests", "Frontend and web interface testing"),
        ("API Tests", "Backend API and route testing with varying difficulty levels"),
        ("AI Tests", "Comprehensive AI stack testing across 4 suites"),
        ("Database Tests", "Data layer testing for vector and Postgres databases")
    ]
    
    for epic_name, description in test_epics_data:
        test_epic_body = f"""
## Description
{description}

## Scope
Testing

## Stories
Multiple test cases and scenarios will be created as child issues.
"""
        
        test_epic = create_issue(
            f"[EPIC] {epic_name}",
            test_epic_body,
            labels=["epic", "test"],
            milestone_number=milestones.get("testing", {}).get("number")
        )
        if test_epic:
            epics[epic_name.lower().replace(" ", "_")] = test_epic
    
    return epics

def create_multitenancy_stories(epic_data, milestones):
    """Create multi-tenancy user stories"""
    print("\nüìù Creating multi-tenancy stories...")
    epic_url = epic_data["html_url"]
    
    mt_stories = [
        ("Audit tables needing tenant ID", "design", "difficulty-low", """
As a developer, I need to audit all existing database tables to identify which ones need tenant ID columns for proper multi-tenancy isolation.

## Acceptance Criteria
- [ ] All database tables reviewed
- [ ] Tables requiring tenant ID identified and documented
- [ ] Migration strategy documented
- [ ] Impact assessment completed
"""),
        ("Design and document multi-tenancy architecture", "design", "difficulty-low", """
As a system architect, I need comprehensive documentation of the multi-tenancy architecture covering data, API, and middleware layers.

## Acceptance Criteria
- [ ] Data layer isolation strategy documented
- [ ] API layer tenant routing documented
- [ ] Middleware tenant enforcement documented
- [ ] Security considerations documented
"""),
        ("Design and create tenant table", "design", "difficulty-low", """
As a developer, I need a properly designed tenant table to store tenant information and configuration.

## Acceptance Criteria
- [ ] Tenant table schema designed
- [ ] Tenant configuration fields defined
- [ ] Default tenant data structure established
- [ ] Table creation migration written
"""),
        ("Update tables with tenant ID", "coding", "difficulty-medium", """
As a developer, I need to add tenant ID columns to all identified tables to enable proper data isolation.

## Acceptance Criteria
- [ ] Migration scripts created for all affected tables
- [ ] Foreign key relationships updated
- [ ] Data migration strategy implemented
- [ ] Rollback procedures documented
"""),
        ("Implement strict tenant ID routing at middleware", "coding", "difficulty-high", """
As a developer, I need middleware that enforces tenant isolation at the request level to prevent cross-tenant data access.

## Acceptance Criteria
- [ ] Middleware extracts tenant ID from requests
- [ ] All database queries automatically scoped to tenant
- [ ] Cross-tenant access blocked
- [ ] Error handling for invalid tenant access
"""),
        ("Scope JWTs to tenants", "coding", "difficulty-medium", """
As a security engineer, I need JWT tokens to include tenant information to ensure proper access control.

## Acceptance Criteria
- [ ] JWT payload includes tenant ID
- [ ] Token validation includes tenant verification
- [ ] Cross-tenant token usage blocked
- [ ] Token refresh maintains tenant scope
"""),
        ("Verify no hard coded secrets", "test", "difficulty-low", """
As a security engineer, I need to verify that no secrets are hard-coded in the application code.

## Acceptance Criteria
- [ ] Static code analysis completed
- [ ] Secret scanning tools run
- [ ] All hard-coded secrets removed
- [ ] Secret management process documented
"""),
        ("Verify ORM protection against SQL injection", "test", "difficulty-medium", """
As a security engineer, I need to verify that the ORM properly protects against SQL injection attacks in a multi-tenant environment.

## Acceptance Criteria
- [ ] SQL injection testing completed
- [ ] ORM parameterization verified
- [ ] Multi-tenant query injection testing done
- [ ] Security test results documented
""")
    ]
    
    for title, work_type, difficulty, body in mt_stories:
        story_body = f"""
{body}

## Epic
This story is part of the [Multi-tenancy Epic]({epic_url})

## Work Type
{work_type.title()}
"""
        create_issue(
            title,
            story_body,
            labels=["story", work_type, difficulty],
            milestone_number=milestones.get("day_4", {}).get("number")
        )

def create_multienvironment_stories(epic_data, milestones):
    """Create multi-environment user stories"""
    print("\nüìù Creating multi-environment stories...")
    epic_url = epic_data["html_url"]
    
    me_stories = [
        ("Spec application IAM", 5, """
As a system architect, I need to specify the Identity and Access Management system for the application across multiple environments.

## Acceptance Criteria
- [ ] IAM roles and permissions defined
- [ ] Environment-specific access controls specified
- [ ] User authentication flows documented
- [ ] Service-to-service authentication designed
"""),
        ("Spec SDLC", 5, """
As a DevOps engineer, I need a comprehensive Software Development Life Cycle specification for multi-environment deployment.

## Acceptance Criteria
- [ ] Development workflow defined
- [ ] Environment promotion strategy specified
- [ ] Testing requirements per environment documented
- [ ] Deployment procedures outlined
"""),
        ("Spec client stack configuration and secrets scoping", 3, """
As a developer, I need specifications for how client applications will be configured and how secrets will be scoped across environments.

## Acceptance Criteria
- [ ] Configuration management strategy defined
- [ ] Environment-specific secret scoping specified
- [ ] Client configuration deployment process documented
- [ ] Secret rotation procedures outlined
"""),
        ("Spec client stack initialization", 3, """
As a developer, I need specifications for how client applications will be initialized in different environments.

## Acceptance Criteria
- [ ] Environment detection logic specified
- [ ] Initialization sequence documented
- [ ] Environment-specific startup procedures defined
- [ ] Error handling for initialization failures specified
""")
    ]
    
    for title, points, body in me_stories:
        story_body = f"""
{body}

## Epic
This story is part of the [Multi-environment Epic]({epic_url})

## Points
{points}

## Work Type
Specification
"""
        create_issue(
            title,
            story_body,
            labels=["story", "design"],
            milestone_number=milestones.get("day_2", {}).get("number")
        )

def create_payment_stories(epic_data, milestones):
    """Create payment and subscriptions user stories"""
    print("\nüìù Creating payment and subscriptions stories...")
    epic_url = epic_data["html_url"]
    
    ps_stories = [
        ("Spec billing systems", 3, """
As a product manager, I need specifications for the billing system to handle customer payments and invoicing.

## Acceptance Criteria
- [ ] Payment processor integration specified
- [ ] Billing cycle management defined
- [ ] Invoice generation process documented
- [ ] Payment failure handling specified
"""),
        ("Spec subscription model and data layer", 2, """
As a data architect, I need specifications for the subscription model and supporting database schema.

## Acceptance Criteria
- [ ] Subscription tiers defined
- [ ] Pricing model documented
- [ ] Database schema for subscriptions designed
- [ ] Subscription lifecycle management specified
"""),
        ("Spec middleware for subscriptions", 3, """
As a backend developer, I need specifications for middleware that enforces subscription-based access control.

## Acceptance Criteria
- [ ] Subscription validation logic specified
- [ ] Feature gating based on subscription level defined
- [ ] Usage tracking for billing specified
- [ ] Subscription upgrade/downgrade flows documented
""")
    ]
    
    for title, points, body in ps_stories:
        story_body = f"""
{body}

## Epic
This story is part of the [Payment and Subscriptions Epic]({epic_url})

## Points
{points}

## Work Type
Specification
"""
        create_issue(
            title,
            story_body,
            labels=["story", "design"],
            milestone_number=milestones.get("day_5", {}).get("number")
        )

def main():
    """Main execution function with proper sequencing"""
    print("üöÄ Setting up Loca Hardening Sprint GitHub Project...")
    
    # Step 1: Setup labels
    setup_labels()
    
    # Step 2: Create milestones first
    milestones = create_milestones()
    
    # Step 3: Create epics (linking to milestones)
    epics = create_epics(milestones)
    
    # Step 4: Create user stories (linking to epics)
    if "multi_tenancy" in epics:
        create_multitenancy_stories(epics["multi_tenancy"], milestones)
    
    if "multi_environment" in epics:
        create_multienvironment_stories(epics["multi_environment"], milestones)
    
    if "payment_subscriptions" in epics:
        create_payment_stories(epics["payment_subscriptions"], milestones)
    
    print("\nüéâ GitHub project setup complete!")
    print(f"View your project at: https://github.com/{REPO_OWNER}/{REPO_NAME}")
    
    # Summary
    print(f"\nüìä Summary:")
    print(f"- Created {len(milestones)} milestones")
    print(f"- Created {len(epics)} epics")
    print(f"- Created user stories for 3 main epics")

if __name__ == "__main__":
    main()
